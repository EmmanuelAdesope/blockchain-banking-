package blockchain

import (
	"encoding/json"
	"time"
)

// Block represents a block in the blockchain
type Block struct {
	Index        int           `json:"index"`
	Transactions []*Transaction `json:"transactions"`
	Timestamp    time.Time     `json:"timestamp"`
	PreviousHash string        `json:"previous_hash"`
	Hash         string        `json:"hash"`
	Nonce        int          `json:"nonce"`
}

// NewBlock creates a new block
func NewBlock(index int, transactions []*Transaction, previousHash string) *Block {
	block := &Block{
		Index:        index,
		Transactions: transactions,
		Timestamp:    time.Now(),
		PreviousHash: previousHash,
		Nonce:        0,
	}
	block.Hash = block.CalculateHash()
	return block
}

// CalculateHash generates the hash for the block
func (b *Block) CalculateHash() string {
	data, _ := json.Marshal(struct {
		Index        int
		Transactions []*Transaction
		Timestamp    time.Time
		PreviousHash string
		Nonce        int
	}{
		Index:        b.Index,
		Transactions: b.Transactions,
		Timestamp:    b.Timestamp,
		PreviousHash: b.PreviousHash,
		Nonce:        b.Nonce,
	})

	return utils.CalculateHash(data)
}

// Mine performs proof of work on the block
func (b *Block) Mine(difficulty int) {
	prefix := make([]byte, difficulty)
	for i := 0; i < difficulty; i++ {
		prefix[i] = '0'
	}

	for {
		b.Hash = b.CalculateHash()
		if utils.HasPrefix(b.Hash, string(prefix)) {
			break
		}
		b.Nonce++
	}
}
